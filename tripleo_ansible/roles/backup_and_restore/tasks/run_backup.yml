---
# Copyright 2019 Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# "backup_and_restore" will search for and load any operating system variable file

# found within the "vars/" path. If no OS files are found the task will skip.
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - skip: true
      files:
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_major_version'] | lower }}.yml"
        - "{{ ansible_facts['distribution'] | lower }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}-{{ ansible_facts['distribution_version'].split('.')[0] }}.yml"
        - "{{ ansible_facts['os_family'] | lower }}.yml"
  tags:
    - always

- name: Move virtual IPs to another node before stopping pacemaker
  when: pacemaker_enabled
  shell: |
    CLUSTER_NODE=$(crm_node -n)
    echo "Retrieving all the VIPs which are hosted on this node"
    VIPS_TO_MOVE=$(crm_mon --as-xml | xmllint --xpath '//resource[@resource_agent = "ocf::heartbeat:IPaddr2" and @role = "Started" and @managed = "true" and ./node[@name = "'${CLUSTER_NODE}'"]]/@id' - | sed -e 's/id=//g' -e 's/"//g')
    for v in ${VIPS_TO_MOVE}; do
        echo "Moving VIP $v on another node"
        pcs resource ban $v ${CLUSTER_NODE} --wait=300
    done
    echo "Removing the location constraints that were created to move the VIPs"
    for v in ${VIPS_TO_MOVE}; do
        echo "Removing location ban for VIP $v"
        ban_id=$(cibadmin --query | xmllint --xpath 'string(//rsc_location[@rsc="'${v}'" and @node="'${CLUSTER_NODE}'" and @score="-INFINITY"]/@id)' -)
        if [ -n "$ban_id" ]; then
           pcs constraint remove ${ban_id}
        else
           echo "Could not retrieve and clear location constraint for VIP $v" 2>&1
        fi
    done
  tags:
    - bar_create_recover_image

- name: Take this node out of pacemaker
  command: pcs node standby
  when: pacemaker_enabled
  tags:
    - bar_create_recover_image

- name: Create the node backup
  become: true
  command: rear {{ '-s ' if tripleo_backup_and_restore_rear_simulate else '' }}-d -v mkbackup
  register: tripleo_backup_and_restore_rear_output
  when: tripleo_backup_and_restore_rear_output is undefined
  tags:
    - bar_create_recover_image

- name: Display ReaR recovery image creation output
  debug:
    var: tripleo_backup_and_restore_rear_output
  tags:
    - bar_create_recover_image

- name: Add the node to the pacemaker cluster
  command: pcs node unstandby
  when: pacemaker_enabled
  tags:
    - bar_create_recover_image

- name: Wait until pacemaker has Galera up&running
  shell: netstat -tunlp | grep ":3306 " | sed -e 's/.*\///'
  register: mysql_result
  retries: 10
  until: mysql_result is search('mysqld')
  delay: 5
  when: pacemaker_enabled
  tags:
    - bar_create_recover_image
